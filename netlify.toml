[build]
  publish = "dist/"
  functions = 'functions/'
  command = "npm run build"
  node_bundler = "esbuild"

[build.environment]
  # CI = "1"
  # cache Cypress binary in local "node_modules" folder
  # so Netlify caches it
  CYPRESS_CACHE_FOLDER = "./node_modules/CypressBinary"
  # set TERM variable for terminal output
  TERM = "xterm"

# https://answers.netlify.com/t/getting-must-use-import-to-load-es-module-when-using-node-fetch-in-netlify-functions/47230/2
[functions]
  node_bundler = "esbuild"

[dev]
  command = "npm run dev:front" # Command to start your dev server
  targetPort = 3000 # The port for your application server, framework or site generator
  port = 3000 # The port that the netlify dev will be accessible on
  autoLaunch = true # a Boolean value that determines if Netlify Dev launches the local server address in your browser
  envFiles = [".env.development.local", ".env.local", ".env.development", ".env"] # The env files to use, ordered by priority (left - highest, right - lowest)

[template.environment]
  NODE_ENV = 'production'
  MAILGUN_API_KEY = 'Your MailGun API Key'
  MAILGUN_DOMAIN = 'example.com'
  MAILGUN_FROM = 'Full Name <fullname@example.com>'
  FAUNADB_SERVER_SECRET = 'Your FaunaDB Server Secret'
  VSSUE_PLATFORM = 'gitlab'
  VSSUE_OWNER = 'github username'
  VSSUE_REPO = 'github repo'
  VSSUE_CLIENT_ID = 'github application token client id'
  VSSUE_CLIENT_SECRET = 'github application token client secret'

# [Settings]
# ID = "Your_Site_ID"

# # Settings in the [build] context are global and are applied to all contexts unless otherwise overridden by more specific contexts.

# [build]
#   # This is the directory to change to before starting a build.
#   base    = "project/"
#   # NOTE: This is where we will look for package.json/.nvmrc/etc, not root.
#   # This is the directory that you are publishing from (relative to root of your repo)
#   publish = "project/build-output/"
#   # This will be your default build command
#   command = "echo 'default context'"
#   # This is where we will look for your lambda functions
#   functions = "project/functions/"

# # Production context: All deploys from the Production branch set in your site's deploy settings will inherit these settings.
# [context.production]
#   publish = "output/"
#   command = "make publish"
#   environment = { ACCESS_TOKEN = "super secret", NODE_ENV = "8.0.1" }

# # Deploy Preview context: All Deploy Previews (https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/)
# # will inherit these settings.
# [context.deploy-preview]
#   publish = "dist/"
# # Here is another way to define context specific environment variables
# [context.deploy-preview.environment]
#   ACCESS_TOKEN = "not so secret"

# # Branch Deploy context: All deploys that are not resulting from a Pull/Merge Request and not from the primary, linked branch will inherit these settings.
# [context.branch-deploy]
#   command = "echo branch"
# [context.branch-deploy.environment]
#   NODE_ENV = "development"

# # Specific branch context: Deploys from this branch
# # will take these settings and override their
# # current ones.
# [context.staging] # 'staging' is a branch name
#   command = "echo 'staging'"
#   base = "staging"
# # For contexts of branches with special characters, enclose the branch name with quotes
# [context."feat/branch"]
#   command = "echo 'special branch'"
#   base = "branch"

# # Note that all redirects and headers are GLOBAL for all builds:
# # they do not get scoped to contexts no matter where you enter them in the file
# # For context-specific rules, use _headers or _redirects - those are PER-DEPLOY.

# # A basic redirects rule
# [[redirects]]
#   from = "/*"
#   to = "/blog/:splat"

# # The following show an example redirects rule with all the supported properties.
# [[redirects]]
#   from = "/old-path"
#   to = "/new-path"
#   status = 301
#   force = false
#   query = {path = ":path"} # apply this rule for /old-path?path=example
#   # NOTE: Each combination of query params will need to be defined in a separate [[redirects]] block. More here: https://www.netlify.com/docs/redirects/#query-params
#   conditions = {Language = ["en"], Country = ["US"], Role = ["admin"]}
#   # you can use env variables you've set in the UI or within your contexts as values
#   # sign each request with the value of this env variable
#   signed = "API_SIGNATURE_TOKEN"
#   # NOTE: env variables are only natively supported for this signed property of headers via this mechanism!
#   # You can also define custom headers within your redirects blocks
#   [redirects.headers]
#     X-From = "Netlify"
#     X-Api-Key = "some-api-key-string"

# The following redirect is intended for use with most SPA's that handles routing internally.
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

[[headers]]
  for = "/*" # This defines which paths this specific [[headers]] block will cover.
  [headers.values]
    Permissions-Policy = "interest-cohort=()" # Opting your Website out of Google's FLoC Network
#     X-Frame-Options = "DENY"
#     X-XSS-Protection = "1; mode=block"
#     Content-Security-Policy = "frame-ancestors https://www.facebook.com"
#     # Multi-key header rules are expressed with multi-line strings
#     Link = '''
#     </assets/css/base.css>; rel=preload; as=style, \
#     </assets/css/base2.css>; rel=preload; as=style, \
#     </assets/css/base3.css>; rel=preload; as=style'''
#     # Basic-Auth allows you to password protect your whole site but is only available
#     # to paid accounts
#     Basic-Auth = "someuser:somepassword anotheruser:anotherpassword"

[[plugins]]
# runs Cypress tests against the deployed URL
package = "netlify-plugin-cypress"
  # but we do not want to run tests against the deployed site
  [plugins.inputs]
    # do not test the deployed URL
    enable = false
    group = 'deployed'
  [plugins.inputs.preBuild]
    # run E2E tests against locally built site
    enable = true
    start = 'npm run dev:front'
    wait-on = 'http://localhost:3000'
    wait-on-timeout = '30' # seconds
    spa = true
    # spec = "cypress/integration/2-advanced-examples/w*.js"
    record = true
    group = 'built'
    tag = "nightly,production"


[[plugins]]
package = "netlify-plugin-checklinks"
  [plugins.inputs]
  # An array of glob patterns for pages on your site
  # Recursive traversal will start from these
  entryPoints = [
    "*.html",
  ]
 
  # Recurse through all the links and asset references on your page, starting
  # at the entrypoints
  recursive = true
 
  # Checklinks outputs TAP (https://testanything.org/tap-version-13-specification.html)
  # by default. Enabling pretty mode makes the output easier on the eyes.
  pretty = true
 
  # You can mark some check as skipped, which will block checklinks
  # from ever attempting to execute them.
  # skipPatterns is an array of strings you can match against failing reports
  skipPatterns = []
 
  # You can mark some check as todo, which will execute the check, but allow failures.
  # todoPatterns is an array of strings you can match against failing reports
  todoPatterns = []
 
  # Report on all broken links to external pages.
  # Enabling this will make your tests more brittle, since you can't control
  # external pages.
  checkExternal = false
 
  # Enable to check references to source maps, source map sources etc.
  # Many build tools don't emit working references, so this is disabled by default
  followSourceMaps = false